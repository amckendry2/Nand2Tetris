/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    //if a-instruction, cInstr=false
    Mux16(a=false, b=instruction, sel=instruction[15], out[12]=ca, out[11]=cc1, out[10]=cc2, out[9]=cc3, out[8]=cc4, out[7]=cc5, out[6]=cc6, out[5]=cd1, out[4]=cd2, out[3]=writeM, out[2]=cj1, out[1]=cj2, out[0]=cj3);

    //choose input to A register based on i bit
    Mux16(a=instruction, b=fromALU, sel=instruction[15], out=toA);

    //load A register if received a-instruction or A dest c-instruction bit
    Not(in=instruction[15], out=loadAInstr);
    Or(a=loadAInstr, b=cd1, out=loadA);
    ARegister(in=toA, load=loadA, out=fromA, out[0..14]=addressM);

    //load D register if received D dest c-instruction bit
    DRegister(in=fromALU, load=cd2, out=ALUInpX);

    //select between M and A for ALU input
    Mux16(a=fromA, b=inM, sel=ca, out=ALUInpY);

    ALU(x=ALUInpX, y=ALUInpY, zx=cc1, nx=cc2, zy=cc3, ny=cc4, f=cc5, no=cc6, zr=zeroOut, ng=negOut, out=fromALU, out=outM);

    //decide whether to jump
    Or(a=zeroOut, b=negOut, out=negOrZero);
    Not(in=negOrZero, out=posOut);

    And(a=cj1, b=negOut, out=j1Satisfied);
    And(a=cj2, b=zeroOut, out=j2Satisfied);
    And(a=cj3, b=posOut, out=j3Satisfied);

    Or(a=j1Satisfied, b=j2Satisfied, out=j1j2);
    Or(a=j1j2, b=j3Satisfied, out=doJump);

    PC(in=fromA, reset=reset, load=doJump, inc=true, out[0..14]=pc);
}
